# version 屬性已被移除
services:
  gateway-service:
    build:
      context: .
      dockerfile: src/gateway-service/Dockerfile
      cache_from:
        - maven:3.9-amazoncorretto-21
        - amazoncorretto:21-alpine-jdk
    ports:
      - "8080:8080"
    container_name: gateway-service
    environment:
      # =================================================================
      # == ADR-008: 激活 OpenTelemetry 時空探針 ==
      # =================================================================
      # 1. 通過 JAVA_TOOL_OPTIONS，將探針附加到 JVM 進程上
      - JAVA_TOOL_OPTIONS=-javaagent:/app/agents/opentelemetry-javaagent.jar
      # 2. 為服務命名，這將成為追蹤數據中的 service.name 標籤
      - OTEL_SERVICE_NAME=gateway-service
      # 3. 告知探針，應將捕獲到的數據，上報給哪個地址 (切換到 Tempo)
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      # == ADR-010: 模式切換器 ==
      #      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=none
      # 4. [關鍵] 告知探針，Kafka 的消息傳播，也應被視為因果鏈路的一部分
      - OTEL_INSTRUMENTATION_KAFKA_CLIENT_PROPAGATION_ENABLED=true
      # =================================================================
      # == ADR-010: 模式切換器 ==
      # =================================================================
      - SPRING_PROFILES_ACTIVE=kafka # 可切換為 rabbitmq
      #      - SPRING_PROFILES_ACTIVE=rabbitmq # 可切換為 kafka
    volumes:
      # 將包含探針的目錄，掛載到容器內部
      - ./agents:/app/agents
      - maven_cache:/root/.m2
    depends_on:
      beacon-service:
        condition: service_started
      redis:
        condition: service_started
    restart: on-failure

  beacon-service:
    build:
      context: .
      dockerfile: src/beacon-service/Dockerfile
      cache_from:
        - maven:3.9-amazoncorretto-21
        - amazoncorretto:21-alpine-jdk
    ports:
      - "8081:8081"
    container_name: beacon-service
    environment:
      # =================================================================
      # == ADR-008: 激活 OpenTelemetry 時空探針 ==
      # =================================================================
      # 1. 通過 JAVA_TOOL_OPTIONS，將探針附加到 JVM 進程上
      - JAVA_TOOL_OPTIONS=-javaagent:/app/agents/opentelemetry-javaagent.jar
      # 2. 為服務命名，這將成為追蹤數據中的 service.name 標籤
      - OTEL_SERVICE_NAME=beacon-service
      # 3. 告知探針，應將捕獲到的數據，上報給哪個地址 (切換到 Tempo)
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      # == ADR-010: 模式切換器 ==
      #      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=none
      # 4. [關鍵] 告知探針，Kafka 的消息傳播，也應被視為因果鏈路的一部分
      - OTEL_INSTRUMENTATION_KAFKA_CLIENT_PROPAGATION_ENABLED=true
      # =================================================================
      # == ADR-010: 模式切換器 ==
      # =================================================================
      - SPRING_PROFILES_ACTIVE=kafka # 可切換為 rabbitmq
      #      - SPRING_PROFILES_ACTIVE=rabbitmq # 可切換為 kafka
    volumes:
      # 將包含探針的目錄，掛載到容器內部
      - ./agents:/app/agents
      - maven_cache:/root/.m2
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully
    restart: on-failure

  kafka:
    image: bitnamilegacy/kafka:3.3.2
    container_name: kafka-broker
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-init-topics:
    image: bitnamilegacy/kafka:3.3.2
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Kafka broker is ready, proceeding with topic creation...' &&
        kafka-topics.sh --create --topic topic.beacon.events --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 &&
        echo 'Topic topic.beacon.events created successfully (if not exists).'
      "

  # =================================================================
  # == ADR-006: 部署 Prometheus 監控哨站 ==
  # =================================================================
  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus-server
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      gateway-service:
        condition: service_started
      beacon-service:
        condition: service_started
    restart: on-failure

  # =================================================================
  # == ADR-006: 部署 Grafana 戰情可視化中心 ==
  # =================================================================
  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana-dashboard
    ports:
      - "3000:3000"
    volumes:
      # 自動化配置數據源，實現「基礎設施即代碼」
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # =================================================================
      # == ADR-009: [新增] 掛載儀表板供應鏈目錄 ==
      # =================================================================
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      prometheus:
        condition: service_started
    restart: on-failure

  loki:
    image: grafana/loki:3.1.0
    container_name: loki-server
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: on-failure

  promtail:
    image: grafana/promtail:3.1.0
    container_name: promtail-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/promtail/config.yml:/etc/promtail/config.yml
    user: root
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: on-failure

  # =================================================================
  # == ADR-008: 部署 Grafana Tempo 時空記憶體 ==
  # =================================================================
  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo-server
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      # 為 Tempo 的本地存儲，創建一個持久化的數據卷
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo UI / HTTP
      - "4317:4317" # OTLP gRPC Receiver
    restart: on-failure

  # =================================================================
  # == ADR-010: 植入 Jaeger 新器官 (目前禁用) ==
  # =================================================================
  #  jaeger:
  #    image: jaegertracing/all-in-one:1.57
  #    container_name: jaeger-server
  #    ports:
  #      - "16686:16686" # Jaeger UI
  #      - "4317:4317"  # OTLP gRPC Receiver
  #    restart: on-failure

  # =================================================================
  # == ADR-007: 部署 Redis (用於分散式 Rate Limiting) ==
  # =================================================================
  redis:
    image: redis:7.2-alpine
    container_name: redis-server
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: on-failure

  # =================================================================
  # == ADR-010: 採用抽象化與標準化接口，實現核心基礎設施組件的可互換性
  # =================================================================
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# 在文件末尾，定義持久化的數據卷
volumes:
  tempo-data:
  redis-data:
  maven_cache:
